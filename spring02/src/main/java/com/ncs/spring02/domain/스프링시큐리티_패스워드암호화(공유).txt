
*** DB 비밀번호 암호화 의 특징

=> 가장 중요한 것은 복호화가 불가능한 단방향 암호코드로 만들어야 한다.
=> 암호는 개발자나 관리자도 알 수 없어야 한다.
=> 공격자가 예측할 수 없도록 솔트(Salt) 처리를 해주어야 한다.
   ( 동일한 원본에 대해 다른 다이제스트를 생성해야한다. )

** 관련 용어
=> 암호화 Encryption ,  복호화 Decryption
=> 다이제스트(digest) : 원본 메시지를 변환하여 생성된 암호화된 메시지
=> 솔트(salt) : 단방향 해시 함수에서 다이제스트를 생성할 때 추가되는 바이트 단위의 임의의 문자열
=> 솔팅(salting) :  원본 메시지에 솔트(salt) 문자열을 추가하여 다이제스트를 생성하는 것
=> 장점: 단방향 해시 함수를 보완할 수 있으며,
            계속 다른 솔트(Salt)를 사용함으로 같은 password를 사용 하더라도
            다른 다이제스트를 생성하게 되어 안전성을 더욱 높여준다.   

** Adaptive(적용가능한) Key Derivation(얻어내다, [derɪˈveɪʃn]) Functions
=> 다이제스트를 생성할 때 솔팅과 키스트레칭을 반복하며 솔트와 패스워드 외에도 입력 값을 추가하여
     공격자가 쉽게 다이제스트를 유추할 수 없도록 하고 보안의 강도를 선택할 수 있다.
     이 함수들은 GPU와 같은 장비를 이용한 병렬화를 어렵게 하는 기능을 제공한다.
     이러한 기능은 프로그램이 언어에서 제공하는 라이브러리만으로는 구현하기 어려우며
     대표적으로 다음과 같은 알고리즘이 있다.

1) PBKDF2 (Password-Based Key Derivation Function)
    아주 가볍고 구현하기 쉬우며, SHA와 같이 검증된 해시 함수만을 사용한다.
    NIST(National Institute of Standards and Technology, 미국표준기술연구소)에 의해서 승인된 알고리즘이고,
    미국 정부 시스템에서도 사용자 패스워드의 암호화된 다이제스트를 생성할 때 사용한다.

2) bcrypt
   bcrypt는 애초부터 패스워드 저장을 목적으로 설계되었다. 
   Niels Provos와 David Mazieres가 1999년 발표했고 현재까지 사용되는 가장 강력한 해시 메커니즘 중 하나이다.
   bcrypt는 보안에 집착하기로 유명한 OpenBSD에서 기본 암호 인증 메커니즘으로 사용되고 있고
   앞으로 PBKDF2보다 더 경쟁력이 있을것으로 여겨진다.
   bcrypt에서 "work factor" 인자는 하나의 해시 다이제스트를 생성하는 데 얼마만큼의 처리 과정을 수행할지 결정한다.
   "work factor"를 조정하는 것만으로 간단하게 시스템의 보안성을 높일 수 있다.
  
3) scrypt
   scrypt는 PBKDF2와 유사한 adaptive key derivation function이며 Colin Percival이 2012년 9월 17일 설계했다.
   scrypt는 다이제스트를 생성할 때 메모리 오버헤드를 갖도록 설계되어, 
   억지 기법 공격(brute-force attack)을 시도할 때 병렬화 처리가 매우 어렵다.
   따라서 PBKDF2보다 안전하다고 평가되며 미래에 bcrypt에 비해 더 경쟁력이 있을것으로 여겨진다.
   scrypt는 보안에 아주 민감한 사용자들을 위한 백업 솔루션을 제공하는 Tarsnap에서도 사용하고 있다.
   또한 scrypt는 여러 프로그래밍 언어의 라이브러리로 제공받을 수 있다.

4) 결론
   MD5, SHA-1, SHA-256, SHA-512 등의 해시 함수는 메시지 인증과 무결성 체크를 위한 것이다.
   이들을 패스워드 보안에 사용하면 같은 password 는 같은 다이제스트를 생성한다는 취약점이 존재한다.
   이를 해결하기 위해서는 위에서 언급한 key derivation function (AKDF) 을 사용하는 것을 권장한다.

   ISO-27001의 보안 규정을 준수하고, 서드파티의 라이브러리에 의존하지 않으면서
   사용자 패스워드의 다이제스트를 생성하려면 PBKDF2-HMAC-SHA-256/SHA-512 을 사용하면 된다.

   매우 강력한 패스워드 다이제스트를 생성하는 시스템을 쉽게 구현하고 싶다면 bcrypt를 사용하는 것이 좋다.
   대부분의 프로그래밍 언어에서 라이브러리를 사용할 수 있고, 
   검색 엔진에서 "bcrypt <프로그래밍 언어>"로 검색하면 쉽게 예제를 구할 수 있다.

   구현하려는 시스템이 매우 민감한 정보를 다루고, 
   보안 시스템을 구현하는 데 많은 비용을 투자할 수 있다면 scrypt를 사용하면 된다.
   
   패스워드 다이제스트의 강도는 결국 패스워드 자체의 길이와 유일성 같은 물리적 특성에 의해서 결정된다.
   따라서 사용자가 안전한 패스워드를 설정하도록 패스워드 정책을 설정하는 것이 매우 중요하다.
   사용자가 모두 다른 패스워드를 사용하도록 강제하는 것이 최상이겠지만 
   현실적으로는 어렵기 때문에 최대한 긴 패스워드를 사용하도록 권장해야 한다.

=============================
*** SHA (Secure Hash Algorithm)

	서로 관련된 암호학적 해시 함수들의 모음.
	이들 함수는 미국 국가안보국(NSA)이 1993년에 처음설계하여 미국 국가표준으로 지정됨.
	SHA 함수군에 속하는 최초의 함수는 공식적으로 SHA라고 불리지만,
	나중에 설계된 함수들과 구별하기 위하여 SHA-0 라고도 함.
	2년 후 SHA-0의 변형인 SHA-1 이 발표되었고, 
	그 후 4종류의 변형, 즉 SHA-224, SHA-256, SHA-384, SHA-512가 더 발표됨.
	이들을 통칭해서 SHA-2라고도 함.
	SHA-1은 SHA 함수들 중 가장 많이 쓰이며,
	TLS, SSL, PGP, SSH, IPSec 등 많은 보안 프로토콜과 프로그램에서 사용됨.
	SHA-1은 이전에 널리 사용되던 MD5를 대신해서 쓰이기도 하지만,
	좀 더 중요한 기술에는 SHA-256이나 그 이상의 알고리즘을 사용할 것을 권장함.

	SHA-0 과 SHA-1 에 대한 공격은 이미 발견되었으나,
	SHA-2에 대한 공격은 아직 발견되지 않았지만, 
	전문가들은 SHA-2 함수들이 SHA-1과 비슷한 방법을 사용하기 때문에
	공격이 발견될 가능성이 있다고 지적했고,
	미국 표준 기술 연구소(NIST)는 SHA-3 으로 명명된 새로운 암호화 해시 알고리즘에 대한 후보를 공모하였다.
=============================

*** 스프링시큐리티  

=> 스프링 시큐리티 라이브러리는 인증/권한인가 등의 처리가 필요할 때 사용하라고 만든 Spring의 패키지이다.
=> 그 중에서 password를 암호화 하는 방법, PasswordEncoder를 사용한다.

=> interface PasswordEncoder
-----------------------------------------------
	public interface PasswordEncoder {

	    String encode(CharSequence var1);
	    // 패스워드를 암호화 할 때 사용

	    boolean matches(CharSequence var1, String var2);
	    // 사용자에게 입력받은 패스워드를 비교할 때 사용
	    // 앞에는 raw password, 뒤에는 encoded password_digest 
	   //  raw : 원본,가공되지않은 날것
	
	    default boolean upgradeEncoding(String encodedPassword) {
	        return false;
	    } // upgradeEncoding
	    // default 메소드는 커스텀해서 더 강력한 암호화를 실행할 때 사용

	} //PasswordEncoder 
-----------------------------------------------

=> 구현 객체
     -> Pbkdf2PasswordEncoder
	- PBKDF2 해싱을 사용함.
	- 해싱+salt 를 동시에 진행한다 (Bcrypt와 동일) 다만 차이점은 아래와 같다
	   * Pbkdf2PasswordEncoder : salt가 8bytes 랜덤 값이다
	   * BCryptPasswordEncoder  : salt가 72bytes 랜덤값이다
	그러므로 bcrypt가 좀더 안전하기 때문에
	( 더 정확하게 표현하면 collision_충돌 이 발생할 수학적 확률이 더 낮음)
               Spring의 기본 PasswordEncoder는 bcrypt를 권장하는 것으로 보인다	
      -> BCryptPasswordEncoder 

      -> SCryptPasswordEncoder
	- Scrypt 해시 함수를 사용하고, 추가적으로 cpu와 memory의 cost parameter를 넘길수 있게 되어있음.
	- Scrypt는 실제로 Salsa20 라는 해싱방식을 사용함.
	- Javadoc에는 보안문제가 존재하여 이 방식을 추천하지 않는다고 쓰여있음.  
      -> DelegationPasswordEncoder (Spring5 추가)
	- Delegation(대표자)
	- PasswordEncoder를 여러개 선언한 뒤, 상황에 맞게 골라쓸 수 있도록 지원하는 Encoder 
        
      -> StandardPasswordEncoder : sha 해쉬 알고리즘을 이용
 
=> BCryptPasswordEncoder
     ->	BCrypt 해시함수를 사용한 구현체이고,  
	해시와 Salt 처리를 동시에 진행 하므로 입력값이 같더라도 매번 다른 다이제스트를 생성하여 리턴한다.
     -> 	생성자 호출시 strength(암호의 강도)를 설정할 수 있으며, 이는 round(반올림자리수)값을 설정하는 부분이다.
      	이때 strength는 strength의 값은 4부터 31까지 가능하지만
	너무 높은 값을 사용하면 해시작업이 매우 오래 걸릴 수 있기 때문에 적절한 값을 사용하는 것이 좋다.
     -> 	사용 가능한 메소드는 encode, matches로, 각각 평문 해시화 기능과 해시결과 일치여부 확인 기능을 제공한다.
	
	--- test -------------------------------------
	String password = "123";
	PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
	String digest1 = passwordEncoder.encode(password);
	String digest2= passwordEncoder.encode(password);
	String digest3= passwordEncoder.encode(password);

	System.out.println("digest1=> "+digest1);
	System.out.println("digest2=> "+digest2);
	System.out.println("digest3=> "+digest3);
	System.out.println(passwordEncoder.matches(password, digest1));
            System.out.println(passwordEncoder.matches(password, digest2));
            System.out.println(passwordEncoder.matches(password, digest3));

	*출력값
	digest1=> $2a$10$rqAY/ztRJ3AGNGfhAQ1dRudAK9UMXGBgcRvQ7MxVUeqH8N5TyHDz6
	digest2=> $2a$10$RRZ6y2nsHfiYSKsQaSrU1uALvPfAXJhXE5vBDsUISC8QrUnY6hW9q
	digest3=> $2a$10$8areTAhIHFKyRNnv.BXWCu6hsRJqsaNemgBUSWvEUh5OIutGLdqeW
	true
	true
	true
 	----------------------------------------------
*** 적용하기

*** 1. DB  

** password 컬럼 길이 확인

=> 암호화된 pasword 길이는 최소 70byte 이상
=> 그러므로 password 컬럼 길이를 varchar2(100) 으로 변경
=> MySql : varchar(100)
	-> alter table member Modify password varchar(100);
	    alter table member Modify password varchar(100) not null;
	-> desc member;

=> sqlplus system/oracle
=> alter table member MODIFY password varchar2(100) ;
=> 추후 모든 자료 password 값 변경 (모두 12345! 의 다이제스트로 변경)
     update member set password='$2a$10$H6cNjqPneGWtJPgqNRpUKOsXOuq/wknRjR2gDj0H9tqOlkOQm6k5i' ;
     commit;

=> select * from member ;
=> select id, password from member ;
-------------------------------------------------------------------------------

*** 2. Application

** 1) pom.xml 

<!--스프링시큐리티 web 라이브러리 (설치된 스프링 버전과 일치해야 함.)-->
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-web</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
		
<!--스프링시큐리티 core 라이브러리-->
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-core</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
======================================
** 아래는 필요시 사용
		
<!--스프링시큐리티 config 라이브러리-->
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-config</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
		
<!-- 시큐리티 태그를 사용하기 위한 taglibs 라이브러리 -->
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-taglibs</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
	
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-test</artifactId>
	<version>4.2.4.RELEASE</version>
	<scope>test</scope>
</dependency>


** 2) root-context.xml 또는 servlet-context.xml

<!--스프링시큐리티 라이브러리 BcryptPasswordEncoder -->
	
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />


----------------------------------------------------------
** 3) Controller
 
** 3.1) 비밀번호 암호화 클래스 인스턴스 정의

// 암호화 Encryption, 복호화 Decryption
@Autowired
PasswordEncoder passwordEncoder ;

// PasswordEncoder interface 구현 클래스
// => Pbkdf2PasswordEncoder, BCryptPasswordEncoder, 
//      SCryptPasswordEncoder, StandardPasswordEncoder, 
//      NoOpPasswordEncoder

 
** 3.2) join,  update 메서드
=> insert 또는 update 하기전에 인코딩 코드 추가  

// Password 인코딩
String encPassword = passwordEncoder.encode(vo.getPassword());
vo.setPassword(encPassword);

** 3.3) mdetail

=> memberDetail.jsp 에서는 password 는 출력하지 않음.
=> updateForm.jsp 에서는 password 를 수정 할 수 있도록 해줌.
     그러나 비밀번호 변경은 별도로 처리하는것이 바람직함.
----------------------------------------------------
	vo = service.selectOne(vo);
	
	// view 확인 ( vcode="L" 이면 detail  아님  update )
	if ("L".equals(request.getParameter("vcode"))) 
			mv.setViewName("member/memberDetail");
	else {
		mv.setViewName("member/updateForm"); 
		// password 암호화 추가 후 encoding된 다이제스트가 출력되지 않고
		// 본래의 password 가 출력 되도록 session 에서 가져 와 vo 에 set 
		// => 수정시 필요하기 때문
		vo.setPassword((String)request.getSession().getAttribute("loginPW"));
	}
	
	mv.addObject("Detail", vo);
	return mv;
----------------------------------------------------

** 3.4) login 기능
=> Controller 수정

	TEST1.  입력된 password 인코딩 후 비교  -> 불가능
	-> Password 가 인코딩후 저장된 상황에서 입력된 id, password 를 모두 비교하는 경우
	-> test 방법 
                   입력 받은 password 를 encoding 처리 후 sql 문에서 동시 비교 
	-> 동일 번호라 하더라도 계속 다른 다이제스트를 생성하기 떄문에 근본적으로 비교불가능
----------------------------------------------------
//	String encPassword = passwordEncoder.encode(password);
//	vo.setPassword(encPassword);
//	vo = service.loginCheck(vo);
//	if (vo != null) {
//		session.setAttribute("loginID", vo.getId());
//		mv.setViewName("login/loginSuccess");
//	} else {
//		mv.addObject("fail","true") ;
//		mv.setViewName("login/loginForm");
//	}
//	
----------------------------------------------------

	TEST2.  먼저 id 를 selectOne 메서드에서 확인 하여 
	-> 성공  ->  password 비교 -> 성공 : 로그인 성공 / 실패 : password 확인 
	-> 실패 : ID 확인 하세요  

	vo = service.selectOne(vo);
	if (vo!=null ) { // id는 정상 
		
		// password 가 암호화 적용전
		//if (password.equals(vo.getPassword())) {
		
		// password 가 encoding 된 경우에는 
		// passwordEncoder.matches(사용자가 입력한 password,  암호화된 password) 
		if (passwordEncoder.matches(password, vo.getPassword())) {
			// 로그인 성공
			session.setAttribute("loginID",vo.getId());
			session.setAttribute("loginNM",vo.getName());
			// BCryptPasswordEncoder 로 암호화 되면 복호화가 불가능함.
			// 그러므로 updateForm.jsp 에서 수정을 위해 Low password를 보관함. 
			session.setAttribute("loginPW",password);
			mv.setViewName("login/loginSuccess");
		}else {
			// password 오류
			mv.addObject("Error","LP");
		}
	}else { // id 오류
		mv.addObject("Error","LI");
	} // if
	return mv ;

----------------------------------------------------

***  member Table 의 password 수정

=> 모든 과정 Test 마친 후 member Table 의 password 를 수정 해야 기존 자료 사용가능함. 

update member set password= '$2a$10$GfxL6yjWTknZetHasoOU8uYdSup4nVutHBWR1vewJ3yKTzt5hRoCa';

select password from member;
commit;
===============================================================
===============================================================

*** 인터셉터 ( Interceptor )
 
=> 특정 URI 요청에 대해 Controller로 가는 요청을 가로채는 역할을 한다.

**  Interceptor 와  Filter (스프링 시큐리티) 의 차이

=> 공통점 : 둘 다 Controller로 들어가는 요청을 가로채 
	   특정 작업 (주로 인증과 권한 확인) 을 위한 용도로 사용된다.

=> 차이점
	- Filter 는 스프링과 무관하게 서블릿 자원이고 (그러므로 스프링과 무관하게 사용가능), 
               Interceptor 는 스프링 빈으로 관리되며 스프링의 컨텍스트내에 속함.   
	- 호출시점이 다름 :  Request > Filter > Servlet > Interceptor > Controller  
	- Filter 는 한글처리 등에 이용되고, 스프링 시큐리티 도 Filter 기반.
  	- Interceptor는 스프링의 Dispatcher Servlet 에서 Controller 호출 전.후에 실행
	  ( 즉, 스프링 내부에서 실행됨 )
	 
* Interceptor 가 인증작업(로그인 확인등) 에 주로 이용되는 이유
	- 만약 인터셉터를 이용하지 않고, 로그인 처리를 한다면, 
	  게시물을 작성("/board/register"), 수정("/board/modify"), 삭제("/board/delete") 등
	  모든 요청마다 Controller에서 session을 통해 로그인 정보가 남아 있는지를
   	  확인하는 코드를 중복해서 입력해야 할 것이다. 
 	  그러나 인터셉터를 이용하면, A, B, C 작업(A,B,C 경로로 요청)을 할 경우에는
 	  ~~Interceptor를 먼저 수행해 session에 로그인 정보가 있는지 확인해 주는 역할을 한다면,
	  중복 코드가 확 줄어들 수 있을 것이다. 이러한 장점 때문에 많이 사용됨.

** 인터셉터를 지원하는 인터페이스와 클래스, 메서드

=> HandlerInterceptor 인터페이스
=> HandlerInterceptorAdapter 추상 클래스
	- 인터페이스를 사용하기 쉽게 구현해 놓은 추상클래스.
	- 정의 메서드
	 : preHandle(), postHandle(), afterCompletion(), afterConcurrentHandlingStarted()

	1) public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
	-> Controller 요청 호출 전에 수행
	    return true : 계속진행
	    return false : 인터셉터, 컨트롤러 실행 중지됨 (만약 필터의 응답처리가 있다면 실행됨)  
 	-> request, response, handler 등의 매개변수 이용가능
	    이들 중 handler 는 이 preHandle() 메서드 수행후 수행될 컨트롤러 메서드에 대한 정보를 담고 있는 handle 이다.

	2) public void postHandle(HttpServletRequest request, HttpServletResponse response, 
		Object handler, ModelAndView modelAndView)
	-> Controller 요청 호출 후 view페이지 출력 직전에 수행
	-> 매개변수 ModelAndView 객체에 컨트롤러에서 전달해온 Model 객체가 전달됨으로
	    view페이지 랜더링 되기전 ModelAndView 객체 조작 가능

	3) public void afterCompletion(
		HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
	-> 컨트롤러가 수행되고 view페이지 랜더링 후 실행됨.

	4) public void afterConcurrentHandlingStarted(
		HttpServletRequest request, HttpServletResponse response, Object handler)
	-> Servlet3.0 부터 비동기 요청 가능하고,
	    비동기 요청시에는 postHandle(), afterCompletion() 은 실행되지않고 이 메서드가 실행됨.  

*** 인터셉터 실습 

** 1.  servlet-context.xml

1.1) 인터셉터 객체 생성
1.2) 인터셉터 설정 
	=> 어떤 url 요청시에 인터셉터를 적용할지를 설정
	=> 1.2.1) 필요한 uri를 하나하나 지정
	=> 1.2.2) 전체경로 "/**" 로 잡아 놓고 "예외url" 을 지정 

--- 1.2.1) -----------------------------------------------------------
<!-- 인터셉터 객체 생성 -->
<beans:bean id="authenticationInterceptor" class="org.zerock.interceptor.AuthenticationInterceptor">
</beans:bean>
<!-- Interceptor 설정 -->
<interceptors>
        <interceptor>
            <mapping path="/board/register"/>
            <mapping path="/board/modify"/>
            <mapping path="/board/delete"/>
            <beans:ref bean="authenticationInterceptor"/>
        </interceptor>
</interceptors>

--- 1.2.2) -----------------------------------------------------------
<!-- 인터셉터 객체 생성 -->
<beans:bean id="loginIntercerpter" class="com.ncs.green.LoginIntercepter" />
<mvc:interceptors>
	<mvc:interceptor>
		<!-- 전체를 지정하고 제외경로 지정  -->
		<mvc:mapping path="/**"/>  
		<mvc:exclude-mapping path="/"/>
		<mvc:exclude-mapping path="/home"/>
		<mvc:exclude-mapping path="/loginf"/>
		<mvc:exclude-mapping path="/joinf"/>
		<mvc:exclude-mapping path="/join"/>
		
		<!-- <mvc:mapping path="/greensn" />
		<mvc:mapping path="/greenall" />
		<mvc:mapping path="/jeju" /> -->
		<beans:ref bean="loginIntercerpter"/>
	</mvc:interceptor>
</mvc:interceptors>
</interceptors>

--- Spring05 실습---------------------------------------------------

=> blist 에 대해 Login 후에만 실행 되도록 하고, 
     Login 하지 않은 상태에서 요청을 하게 되면 Login 화면을 출력하여 Login 하도록 유도한다. 

=> servlet-context.xml 수정,  LoginInterceptor.java 작성, 
     loginForm.jsp, Controller의 mlogin 수정

<!-- 인터셉터 객체 생성 -->
<beans:bean id="LoginInterceptor" class="com.ncs.green.LoginInterceptor" />
	
<!-- 인터셉터 설정 -->
<interceptors>
	<interceptor>
		<!-- <mapping path="/**"/>  전체경로 지정-->
		<mapping path="/blist"/>
		<!-- 제외시킬 파일 경로 
		<exclude-mapping path="/joinF"/>
		-->
		<beans:ref bean="LoginInterceptor"/>
	</interceptor>
</interceptors>

----------------------------------------------------------------------
----------------------------------------------------------------------

*** 2. LoginInterceptor.java  

package com.ncs.green;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

// 로그인처리를 담당하는 인터셉터
// HandlerInterceptorAdapter
// => HandlerInterceptor 인터페이스를 사용하기 편리하게 구현해 놓은 추상 클래스
// 오버라이딩 단축키 : shift + alt + s + v 

public class LoginInterceptor extends HandlerInterceptorAdapter {

	// preHandle() : 컨트롤러보다 먼저 수행되는 메서드
	@Override 
	public boolean preHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler) throws Exception {
	  
		// session 객체를 가져옴
		HttpSession session = request.getSession();
	  
		// login 여부 확인하기 
		if (session.getAttribute("loginID")==null) { 
			// 로그인이 안되어 있는 상태임으로 로그인 폼으로 다시 돌려보냄(redirect)
			session.setAttribute("fail", "needLogin");
			response.sendRedirect("/green/loginf");
			// request.getRequestDispatcher("login/loginForm.jsp").forward(request, response);
			// => 스프링의 경로 처리로 직접 jsp 를 실행 시킬수 없으므로 404 오류  
			
			// 더이상 컨트롤러 요청으로 가지 않도록 false로 반환함 return false; }
			// => preHandle의 return은 컨트롤러 요청 uri로 가도 되냐 안되냐를 허가하는 의미임
			//     따라서 true return 하면 컨트롤러  uri로 가게 됨. 
			return false;
		}else return true;
	} // preHandle

	// 컨트롤러가 수행되고 화면이 보여지기 직전에 수행되는 메서드
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		super.postHandle(request, response, handler, modelAndView);
	} // postHandle 
	
	@Override
    	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            			throws Exception {
        		super.afterCompletion(request, response, handler, ex);
    	} // afterCompletion
	
} // class

----------------------------------------------------------------------
** loginForm.jsp 아래 코드 추가

<c:if test="${fail=='needLogin'}">
	<script>alert('Login 후  가능합니다~~');
			$('#id').focus();
	</script>
</c:if>

----------------------------------------------------------------------
** Controller의 mlogin 메서드에 session 생성후 아래 코드 추가

if (session.getAttribute("fail") !=null) session.removeAttribute("fail"); 
// 인터셉터에서 만든 Attribute 필요없고, 오류 방지 위해 삭제함.





